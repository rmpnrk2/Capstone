@page "/membership-due-payment-pending/{membershipDueGUID}";

@inject SouthSideK9CampHttpClient HttpClient
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-16 mb-16">
    <MudStack>

        <MudText Typo="Typo.h4">SouthSide K9 Membership Registration Payment Success</MudText>

        <MudStack AlignItems="AlignItems.Center">
            <MudImage Src="@_imageString" Height="500" />
        </MudStack>

        <MudText Typo="Typo.body1">Your payment submission has been received. You may now safely close this website and wait for the approval of your payment.</MudText>
        <MudText Typo="Typo.body1">We will notify you once the payment has been successfully processed. If you have any questions in the meantime, please don't hesitate to contact us.</MudText>
        <MudText Typo="Typo.body1">If you wish to make changes to your payment submission, please click the link below:</MudText>
        <MudButton OnClick="_SubmitAsync" Disabled="@_resubmitButtonDisabled" Variant="Variant.Outlined">Resubmit Payment</MudButton>
        <MudProgressLinear Style="@_linearProgressBar" Color="Color.Primary" Indeterminate="true" />

    </MudStack>
</MudContainer>

@code
{
    [Parameter] public string membershipDueGUID { get; set; } = string.Empty;
    private string _imageString = string.Empty;

    // on parameter set
    Shared.Client? client;
    protected override async Task OnParametersSetAsync()
    {
        client = await HttpClient.MembershipDue.GetByGuid(membershipDueGUID);

        if (client == null || client.Member == null)
        {
            NavigationManager.NavigateTo("/not-found");
            return;
        }

        if (client.Member.MembershipDues.First(d => d.GUID.ToString() == membershipDueGUID).PaymentConfirmed)
        {
            NavigationManager.NavigateTo("/membership-due-payment-approved");
            return;
        }

        if (client.Member.MembershipDues.First(d => d.GUID.ToString() == membershipDueGUID).ProofOfPaymentURL == string.Empty)
        {
            NavigationManager.NavigateTo($"/membership-due-payment/{membershipDueGUID}");
            return;
        }

        _imageString = client.Member.MembershipDues.First(d => d.GUID.ToString() == membershipDueGUID).ProofOfPaymentURL;
    }

    // resubmit
    bool _resubmitButtonDisabled = false;
    string _linearProgressBar = "display: none";
    private async Task _SubmitAsync()
    {
        _resubmitButtonDisabled = true;
        _linearProgressBar = string.Empty;

        if (client != null && client.Member != null)
            await HttpClient.MembershipDue.DuePaymentResubmitAsync(client.Member.MembershipDues.First(d => d.GUID.ToString() == membershipDueGUID).ID);

        NavigationManager.NavigateTo($"/membership-due-payment/{membershipDueGUID}");
    }
}
