@page "/customer-registration-payment/{dogGUID}";
@page "/customer-registration-payment/{dogGUID}/{reasonGUID}";

@inject SouthSideK9CampHttpClient HttpClient
@inject NavigationManager NavigationManager

@using System.Net.Http.Headers
@using FluentValidation
@using MudBlazor

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-16 mb-16">
    <MudStack>

        <MudText Typo="Typo.h4">SouthSide K9 Reservation Payment</MudText>

        @* display reason for rejection *@
        @if(reason.ID != 0)
        {
            <MudAlert Severity="MudBlazor.Severity.Warning">Your previous payment was rejected: @reason.Reason</MudAlert>
        }

        @* payment information *@
        <MudStack Spacing="0">
            <MudDivider Class="my-4" />
            <MudText Typo="Typo.body1">To complete your board and train registration a reservervation fee must be paid to secure your schedule:</MudText>
            <MudDivider Class="my-4" />
            <MudText Typo="Typo.h6">Payment Details:</MudText>
            <MudText Typo="Typo.body1">Board & Train reservation fee: 300.00 php</MudText>
            <MudDivider Class="my-4" />
            <MudText Typo="Typo.h6">GCash Payment Instruction:</MudText>
            <MudText Typo="Typo.body1">1. Open GCash App</MudText>
            <MudText Typo="Typo.body1">2. Click "Pay QR"</MudText>
            <MudText Typo="Typo.body1">
                3. Scan QR Code
                <MudButton OnClick="@_ViewQRcode" StartIcon="@Icons.Material.Filled.OpenInNew" Size="Size.Small" Color="Color.Primary">Click here to view QR code</MudButton>
            </MudText>
            <MudText Typo="Typo.body1">4. Input reservation ammount: 300.00 php</MudText>
            <MudText Typo="Typo.body1">5. Send payment</MudText>
            <MudText Typo="Typo.body1">6. Screenshot payment receipt</MudText>
            <MudText Typo="Typo.body1">7. Upload payment receipt</MudText>
            <MudDivider Class="my-4" />
        </MudStack>

        @* image display *@
        @if (_FormModel.file is not null)
        {
            <MudStack AlignItems="AlignItems.Center">
                <MudImage Src="@_imageString" Height="300" />
                <MudText><MudIcon Icon="@Icons.Material.Filled.AttachFile" />@_FormModel.file.Name</MudText>
            </MudStack>
        }

        @* editform for membership payment *@
        <EditForm EditContext="@_FormContext" OnValidSubmit="@_SubmitAsync" Context="context">
            <FluentValidationValidator />

            @* upload button *@
            <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles" Accept=".png, .jpg" For="@(() => _FormModel.file)" MaxFileSize="10485760">
                <ActivatorContent>
                    <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload" FullWidth>
                        Upload proof of payment
                    </MudButton>
                </ActivatorContent>
            </MudFileUpload>

        </EditForm>

        <MudButton OnClick="@_SubmitAsync" Disabled="@_submitButtonDisabled" Variant="Variant.Filled" Color="Color.Primary">Submit</MudButton>
        <MudProgressLinear Style="@_linearProgressBarDisplay" Color="Color.Primary" Indeterminate="true" />

    </MudStack>
</MudContainer>

@* View QR code MessageBox *@
<MudMessageBox @ref="_messageBox">

    <TitleContent>
        <MudText Typo="Typo.h6"></MudText>
    </TitleContent>

    <MessageContent>
        <MudImage Src="Images/qrcode.png" />
    </MessageContent>

    <YesButton />
    <CancelButton />

</MudMessageBox>

@code
{
    [Parameter] public string dogGUID { get; set; } = string.Empty;
    [Parameter] public string? reasonGUID { get; set; } = string.Empty;

    // on parameter set
    Shared.Dog? dog = new();
    Shared.ReasonForRejection reason = new();

    protected override async Task OnParametersSetAsync()
    {
        dog = await HttpClient.Dog.GetByGuid(dogGUID);

        if (dog == null)
        {
            NavigationManager.NavigateTo("/not-found");
            return;
        }

        // if member has already sent payment
        if (dog.ReservationPaymentURL != string.Empty)
            NavigationManager.NavigateTo($"/customer-registration-payment-submitted/{dogGUID}");

        // get reason for rejection
        if(reasonGUID != null) reason = await HttpClient.Reason.GetByGUIDAsync(reasonGUID);
    }

    // form context with validation
    private class FormModel
    {
        public IBrowserFile? file { get; set; }
    }
    private FormModel _FormModel = new();
    private class FormModelValidator : AbstractValidator<FormModel>
    {
        private FormModelValidator()
        {
            RuleFor(e => e.file).NotEmpty().WithMessage("This field is required");
        }
    }

    // on initialize
    private EditContext? _FormContext;
    protected override void OnInitialized()
    {
        _FormContext = new EditContext(_FormModel);
    }

    // image upload logic
    private string _imageString = string.Empty;
    private async Task UploadFiles(IBrowserFile file)
    {
        var resizedImage = await file.RequestImageFileAsync("image/png", 300, 300); // resize image
        var buffer = new byte[resizedImage.Size]; // image to byte
        await resizedImage.OpenReadStream().ReadAsync(buffer); // byte to stream

        _imageString = $"data:image/png;base64,{Convert.ToBase64String(buffer)}"; // stream to string

        _FormModel.file = file;

        _submitButtonDisabled = false;
    }

    // submit
    string _linearProgressBarDisplay = "display: none";
    bool _submitButtonDisabled = true;
    private async Task _SubmitAsync()
    {
        if (_FormContext is not null)
            if (_FormContext.Validate())
            {
                _submitButtonDisabled = true;
                _linearProgressBarDisplay = string.Empty;

                // image to stream
                MemoryStream stream = new MemoryStream();
                await _FormModel.file!.OpenReadStream(10485760).CopyToAsync(stream);

                // add stream to content
                ByteArrayContent imageContent = new ByteArrayContent(stream.ToArray());
                imageContent.Headers.ContentType = new MediaTypeHeaderValue(_FormModel.file.ContentType);

                // add content to multipartcontent
                MultipartFormDataContent multipartContent = new MultipartFormDataContent();
                multipartContent.Add(imageContent, "imageContent", _FormModel.file.Name);

                if (dog != null)
                    await HttpClient.Customer.ReservationPayment(dog.ID, multipartContent);

                NavigationManager.NavigateTo($"/customer-registration-payment-submitted/{dogGUID}");
            }
        return;
    }

    // View QR code messagebox
    private MudMessageBox? _messageBox { get; set; }
    private async Task _ViewQRcode()
    {
        bool? result = await _messageBox!.ShowAsync(new DialogOptions()
        {
            CloseButton = true,
            BackdropClick = true
        });
    }
}