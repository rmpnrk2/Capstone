@page "/admin/client-list"

@layout AdminLayout

@inject NavigationManager NavigationManager;
@inject SouthSideK9CampHttpClient HttpClient;
@inject ISnackbar Snackbar;
@inject IDialogService DialogService;

@using System.Net.Http.Json;
@using SouthSideK9Camp.Shared;
@using System.Text.RegularExpressions;
@using System.ComponentModel.DataAnnotations;

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-16 mb-16">
    <MudStack>

        @* Breadcrumbs *@
        <MudBreadcrumbs Items="_breadcrumbs" />

        <MudText Typo="Typo.h3">Clients Records</MudText>

        @* toolbar *@
        <MudPaper>
            <MudToolBar>
                <MudStack Row Justify="Justify.FlexStart">

                    <MudMenu StartIcon="@Icons.Material.Outlined.FilterAlt" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" Variant="Variant.Filled" Color="Color.Primary" Label="@_filter" TransformOrigin="Origin.TopCenter" AnchorOrigin="Origin.BottomCenter" FullWidth>
                        <MudMenuItem OnTouch="@(() => _FilterListAsync("All"))" OnClick="@(() => _FilterListAsync("All"))">All</MudMenuItem>
                        <MudMenuItem OnTouch="@(() => _FilterListAsync("Customer"))" OnClick="@(() => _FilterListAsync("Customer"))">Customer</MudMenuItem>
                        <MudMenuItem OnTouch="@(() => _FilterListAsync("Member"))" OnClick="@(() => _FilterListAsync("Member"))">Member</MudMenuItem>
                    </MudMenu>

                </MudStack>
            </MudToolBar>
        </MudPaper>

        <MudTable Items="_clients" Hover="true">

            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Type</MudTh>
                <MudTh></MudTh>
            </HeaderContent>

            <RowTemplate>

                @* member data *@
                <MudTd DataLabel="Name">
                    <MudStack Row>

                        <MudAvatar Variant="Variant.Outlined" Color="Color.Primary">@context.FirstName[0]</MudAvatar>

                        <MudStack Spacing="0" AlignItems="AlignItems.Start">
                            <MudText Typo="Typo.body1">@context.FirstName @context.MiddleInitial @context.LastName</MudText>
                            <MudText Typo="Typo.caption">@context.Email | @context.Contact</MudText>
                        </MudStack>

                    </MudStack>
                </MudTd>

                <MudTd DataLabel="Type">
                    <MudStack Spacing="0" Row>

                        @if (context.Customer != null)
                        {
                            <MudChip T="string" Variant="Variant.Text" Color="Color.Success">Customer</MudChip>
                        }
                        @if (context.Member != null)
                        {
                            <MudChip T="string" Variant="Variant.Text" Color="Color.Info">Member</MudChip>
                        }

                    </MudStack>
                </MudTd>

                @* buttons *@
                <MudTd>
                    <MudStack AlignItems="AlignItems.End">
                        <MudStack Row>

                                <MudButton OnClick="@(() => _OpenClient(context.ID))" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Info">Open</MudButton>

                        </MudStack>
                    </MudStack>
                </MudTd>

            </RowTemplate>

            <PagerContent>
                <MudTablePager />
            </PagerContent>

        </MudTable>
        
    </MudStack>
</MudContainer>

@code
{
    List<Shared.Client> _clients = new();

    // Breadcrumbs
    private List<BreadcrumbItem> _breadcrumbs = new()
    {
        new BreadcrumbItem("Client Records", "/admin/client-list", true, Icons.Material.Filled.Group),
    };

    // on initialize
    protected override async Task OnInitializedAsync()
    {
        await _RefreshDataAsync();
    }

    // filter
    private string _filter = "All";

    private async Task _FilterAsync()
    {
        await _RefreshDataAsync();

        if (_filter == "All")
            return;

        if (_filter == "Customer")
        {
            _clients = _clients.Where(c => c.Customer != null).ToList();
            return;
        }

        if (_filter == "Member")
        {
            _clients = _clients.Where(c => c.Member != null).ToList();
            return;
        }
    }

    private async Task _FilterListAsync(string filter)
    {
        await _RefreshDataAsync();
        _filter = filter;

        if (_filter == "All")
            return;    

        if(_filter == "Customer")
        {
            _clients = _clients.Where(c => c.Customer != null).ToList();
            return;
        }

        if(_filter == "Member")
        {
            _clients = _clients.Where(c => c.Member != null).ToList();
            return;
        }
    }

    // open client
    private void _OpenClient(int clientID)
    {
        NavigationManager.NavigateTo($"/admin/client/{clientID}");
    }

    // refresh data
    private async Task _RefreshDataAsync()
    {
        _clients = await HttpClient.Client.GetAsync();
        StateHasChanged();

        _clients = await HttpClient.Client.FetchAsync();
    }
}
