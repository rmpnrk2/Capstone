@using System.Text.Json
@using Newtonsoft.Json

@inject NavigationManager NavigationManager
@inject SouthSideK9CampHttpClient HttpClient
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudStack>

    @* toolbar *@
    <MudPaper>
        <MudToolBar>

            <MudIconButton OnClick="_PreviousMonth" Icon="@Icons.Material.Filled.NavigateBefore"></MudIconButton>
            <MudDatePicker Variant="Variant.Outlined" Label="Month" @bind-Date="_yearMonthFilter" PickerMonthChanged="@_RefreshDataAsync" OpenTo="OpenTo.Month" DateFormat="MMMM yyyy" FixDay="1" Margin="Margin.Dense" ShowToolbar="false" />
            <MudIconButton OnClick="_NextMonth" Icon="@Icons.Material.Filled.NavigateNext" />

            <MudSpacer />

            <MudButton OnClick="@_EmailDues" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Email">Mail</MudButton>

        </MudToolBar>
    </MudPaper>

    @* table *@
    <MudTable Items="_clients" Hover="true">

        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Expiration</MudTh>
            <MudTh>Status</MudTh>
            <MudTh></MudTh>
        </HeaderContent>

        <RowTemplate>

            @* member data *@
            <MudTd DataLabel="Name">
                <MudStack Row AlignItems="AlignItems.Center">

                    <MudAvatar Variant="Variant.Outlined" Color="Color.Primary">@context.FirstName[0]</MudAvatar>
                    <MudText Typo="Typo.body1">@context.FirstName @context.MiddleInitial @context.LastName</MudText>

                </MudStack>
            </MudTd>

            <MudTd DataLabel="Expiration">
                <MudStack Row>

                    <MudText Typo="Typo.body1">@context.Member?.MembershipDues?.FirstOrDefault(d => d.DateTimeDue.Year == _yearMonthFilter?.Year && d.DateTimeDue.Month == _yearMonthFilter.Value.Month)?.DateTimeDue.ToString("dd MMMM yyyy")</MudText>

                </MudStack>
            </MudTd>

            <MudTd DataLabel="Status">
                <MudStack Row>

                    @if(context.Member?.MembershipDues?.FirstOrDefault(d => d.DateTimeDue.Year == _yearMonthFilter?.Year && d.DateTimeDue.Month == _yearMonthFilter.Value.Month)?.DateTimeDue > DateTime.UtcNow)
                    {
                        <MudChip T="string" Variant="Variant.Text" Color="Color.Success">Active</MudChip>
                    }
                    else if (context.Member?.MembershipDues.FirstOrDefault(d => d.DateTimeDue.Year == _yearMonthFilter?.Year && d.DateTimeDue.Month == _yearMonthFilter.Value.Month)?.PaymentConfirmed ?? false)
                    {
                        <MudChip T="string" Variant="Variant.Text" Color="Color.Success">Approved</MudChip>
                    }
                    else if (context.Member?.MembershipDues.FirstOrDefault(d => d.DateTimeDue.Year == _yearMonthFilter?.Year && d.DateTimeDue.Month == _yearMonthFilter.Value.Month)?.ProofOfPaymentURL != string.Empty)
                    {
                        <MudChip T="string" Variant="Variant.Text" Color="Color.Warning">Pending</MudChip>
                    }
                    else if (context.Member?.MembershipDues.FirstOrDefault(d => d.DateTimeDue.Year == _yearMonthFilter?.Year && d.DateTimeDue.Month == _yearMonthFilter.Value.Month)?.ProofOfPaymentURL == string.Empty)
                    {
                        <MudChip T="string" Variant="Variant.Text" Color="Color.Error">Not Paid</MudChip>
                    }

                </MudStack>
            </MudTd>

            @* buttons *@
            <MudTd>
                <MudStack AlignItems="AlignItems.End">
                    <MudStack Row>

                        <MudButtonGroup Variant="Variant.Filled" Color="Color.Primary">

                            @if (context.Member?.MembershipDues.FirstOrDefault(d => d.DateTimeDue.Year == _yearMonthFilter?.Year && d.DateTimeDue.Month == _yearMonthFilter.Value.Month)?.PaymentConfirmed ?? false)
                            {
                                <MudButton OnClick="@(() => _ShowReceipt(context.Member?.MembershipDues.FirstOrDefault()?.ID ?? 0))" StartIcon="@Icons.Material.Filled.Receipt">Receipt</MudButton>
                            }
                            else if (context.Member?.MembershipDues.FirstOrDefault(d => d.DateTimeDue.Year == _yearMonthFilter?.Year && d.DateTimeDue.Month == _yearMonthFilter.Value.Month)?.ProofOfPaymentURL != string.Empty)
                            {
                                <MudButton OnClick="@(() => _ShowReceipt(context.Member?.MembershipDues.FirstOrDefault()?.ID ?? 0))" StartIcon="@Icons.Material.Filled.Receipt">Receipt</MudButton>
                            }

                        </MudButtonGroup>

                    </MudStack>
                </MudStack>
            </MudTd>

        </RowTemplate>

        <PagerContent><MudTablePager /></PagerContent>

    </MudTable>

</MudStack>

@* view receipt messagebox *@
<MudMessageBox @ref="_receiptMessageBox">

    <MessageContent>
        <MudStack AlignItems="AlignItems.Center">
            <MudImage Src="@_due?.ProofOfPaymentURL" Fluid />
        </MudStack>
    </MessageContent>

    <NoButton>
        @if (!_due?.PaymentConfirmed ?? false)
        {
            <MudButton Color="Color.Error" Variant="Variant.Filled">Reject</MudButton>
        }
    </NoButton>

    <YesButton>
        @if (_due?.PaymentConfirmed ?? false)
        {
            <MudButton Disabled EndIcon="@Icons.Material.Filled.Check" Variant="Variant.Outlined">Approved</MudButton>
        }
        else
        {
            <MudButton Class="ml-1" Color="Color.Primary" Variant="Variant.Filled">Approve</MudButton>
        }
    </YesButton>

</MudMessageBox>

@code
{
    private List<Shared.Client> _clients = new();

    protected override async Task OnInitializedAsync()
    {
        _yearMonthFilter = DateTime.UtcNow;
        await _RefreshDataAsync();
    }

    // date filter
    private DateTime? _yearMonthFilter = DateTime.UtcNow;

    private async Task _NextMonth()
    {
        _yearMonthFilter = _yearMonthFilter?.AddMonths(1);

        if (_yearMonthFilter?.Month == DateTime.UtcNow.AddMonths(1).Month || _yearMonthFilter?.Year < DateTime.UtcNow.Year)

        await _RefreshDataAsync();
    }

    private async Task _PreviousMonth()
    {
        _yearMonthFilter = _yearMonthFilter?.AddMonths(-1);
        await _RefreshDataAsync();
    }

    // email all expired membershipdues
    private async Task _EmailDues()
    {
        await HttpClient.MembershipDue.NotifyAsync();
        Snackbar.Add("Emails sent", Severity.Success);
    }

    // open receipt
    private MudMessageBox? _receiptMessageBox { get; set; }
    private Shared.MembershipDue? _due = new();
    private async Task _ShowReceipt(int membershipDueID)
    {
        _due = _clients
            .Where(c => c.Member != null && c.Member.MembershipDues
            .Any(d => d.ID == membershipDueID))
            .SelectMany(c => c.Member!.MembershipDues)
            .Where(d => d.ID == membershipDueID)
            .FirstOrDefault();

        bool? result = await _receiptMessageBox!.ShowAsync(new DialogOptions()
        {
            FullScreen = true,
            CloseButton = true
        });

        // Approve payment
        if (result == true)
        {
            await HttpClient.MembershipDue.ApprovePaymentAsync(membershipDueID);
            await _RefreshDataAsync();
            Snackbar.Add("Approved succesfully", Severity.Success);
        }

        // Reject payment
        if (result == false)
        {
            var dialog = await DialogService.ShowAsync<MemberPageComponents.RejectDueDialog>(string.Empty,
            new DialogParameters<MemberPageComponents.RejectDueDialog>
            {
                { d => d.membershipDueID, membershipDueID },
            },
            new DialogOptions()
            {
                BackdropClick = false,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
                CloseButton = true,
                CloseOnEscapeKey = true
            });

            // on dialog close
            DialogResult? dialogResult = await dialog.Result;
            if (dialogResult != null && !dialogResult.Canceled)
            {
                string json = JsonConvert.SerializeObject(dialogResult.Data);
                Shared.ReasonForRejection reason = JsonConvert.DeserializeObject<Shared.ReasonForRejection>(json) ?? new();
                await HttpClient.MembershipDue.RejectPaymentAsync(membershipDueID, reason);

                Snackbar.Add("Payment rejected", Severity.Error);
                await _RefreshDataAsync();
            }
        }
    }

    // refresh data
    private async Task _RefreshDataAsync()
    {
        _clients = await HttpClient.Client.GetAsync();
        _clients = _clients.Where(c => c.Member != null && c.Member.MembershipDues.Any(d => d.DateTimeDue.Year == _yearMonthFilter?.Year && d.DateTimeDue.Month == _yearMonthFilter.Value.Month)).ToList();
        StateHasChanged();

        _clients = await HttpClient.Client.FetchAsync();
        _clients = _clients.Where(c => c.Member != null && c.Member.MembershipDues.Any(d => d.DateTimeDue.Year == _yearMonthFilter?.Year && d.DateTimeDue.Month == _yearMonthFilter.Value.Month)).ToList();
        StateHasChanged();
    }
}
