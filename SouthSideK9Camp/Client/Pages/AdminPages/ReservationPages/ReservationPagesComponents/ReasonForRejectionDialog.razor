@inject SouthSideK9CampHttpClient HttpClient
@inject ISnackbar Snackbar

<MudDialog>

    @* dialog content *@
    <TitleContent>
        <MudText Typo="Typo.h6">Reason For Rejection</MudText>
    </TitleContent>

    @* dialog content *@
    <DialogContent>
        <EditForm EditContext="@_editContext">

            <FluentValidationValidator />

            <MudAutocomplete @bind-Value="_reason.Reason" For="@(() => _reason.Reason)" Variant="Variant.Outlined" Label="Reason for rejection" SearchFunc="@_reasonForRejectionAutocomplete" CoerceValue />

        </EditForm>
    </DialogContent>

    @* dialog button *@
    <DialogActions>
        <MudButton OnClick="@_Submit" Variant="Variant.Filled" Color="Color.Error">Reject</MudButton>
    </DialogActions>

</MudDialog>

@code
{

    [CascadingParameter] private MudDialogInstance MudDialog { get; set; } = new();

    [Parameter] public int dogID { get; set; } = new();

    // form model
    private EditContext? _editContext;
    private Shared.ReasonForRejection _reason = new();

    protected override void OnInitialized()
    {
        _editContext = new EditContext(_reason);
    }

    // autocomplete reasons
    private string[] _commonReasonsForRejection =
    {
        "Photo is blurry", "Photo is not a payment receipt", "Photo is unreadable", "Photo is cropped"
    };
    private async Task<IEnumerable<string>> _reasonForRejectionAutocomplete(string value, CancellationToken token)
    {
        await Task.Delay(5, token);

        if (string.IsNullOrEmpty(value))
            return _commonReasonsForRejection;

        return _commonReasonsForRejection.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    // submit form
    private void _Submit()
    {
        if (!_editContext!.Validate()) return;

        MudDialog.Close(DialogResult.Ok(_reason));
    }

    // close dialog
    private void _Cancel() => MudDialog.Cancel();
}
