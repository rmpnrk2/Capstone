@page "/admin/reservation/{reservationID:int}"

@layout AdminLayout

@inject NavigationManager NavigationManager
@inject SouthSideK9CampHttpClient HttpClient
@inject ISnackbar Snackbar
@inject IDialogService DialogService

@using FluentValidation

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-16 mb-16">
    <MudStack>

        <MudText Typo="Typo.h3">Reservations</MudText>

        @* toolbar *@
        <MudPaper>
            <MudToolBar>
                <MudStack Row>

                    <MudButton OnClick="@_Back" StartIcon="@Icons.Material.Filled.ArrowBack"/>
                    <MudButton OnClick="@_EditMode" Style="@_editButtonDisplay" StartIcon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Primary">Edit</MudButton>
                    <MudButton OnClick="@_CancelAsync" Style="@_editModeButtonDisplay" StartIcon="@Icons.Material.Filled.Cancel" Variant="Variant.Filled">Cancel</MudButton>
                    <MudButton OnClick="@_SaveAsync" Style="@_editModeButtonDisplay" StartIcon="@Icons.Material.Filled.Save" Variant="Variant.Filled" Color="Color.Primary">Save</MudButton>
                    <MudButton OnClick="@_DeleteDialog" Disabled="@_disabledDelete" StartIcon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Error">Delete</MudButton>

                </MudStack>
            </MudToolBar>
        </MudPaper>

        <EditForm EditContext="@_formContext" Context="Context">
            <FluentValidationValidator />

            <MudGrid Spacing="1">

                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="_reservation.Name" For="@(() => _reservation.Name)" Label="Title" Variant="Variant.Outlined" FullWidth ReadOnly="_isFormReadonly" />
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudNumericField @bind-Value="_reservation.Slots" For="@(() => _reservation.Slots)" Label="Slots" Variant="Variant.Outlined" FullWidth ReadOnly="_isFormReadonly" />
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudDatePicker @bind-Date="_reservation.StartingDate" For="@(() => _reservation.StartingDate)" Label="Starting Date" Variant="Variant.Outlined" ShowToolbar="false" ReadOnly="_isFormReadonly" DateFormat="dd MMMM yyyy"
                        IsDateDisabledFunc="@((DateTime dt) =>(
                        (int)dt.Year > _reservation.StartingDate?.Year ||
                        ((int)dt.Year == _reservation.StartingDate?.Year && (int)dt.Month > _reservation.StartingDate?.Month) ||
                        ((int)dt.Year == _reservation.StartingDate?.Year && (int)dt.Month == _reservation.StartingDate?.Month && (int)dt.Day >= _reservation.EndingDate?.Day)))" />
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudDatePicker @bind-Date="_reservation.EndingDate" For="@(() => _reservation.EndingDate)" Label="Ending Date" Variant="Variant.Outlined" ShowToolbar="false" ReadOnly="_isFormReadonly" DateFormat="dd MMMM yyyy"
                        IsDateDisabledFunc="@((DateTime dt) =>(
                        (int)dt.Year < _reservation.StartingDate?.Year ||
                        ((int)dt.Year == _reservation.StartingDate?.Year && (int)dt.Month < _reservation.StartingDate?.Month) ||
                        ((int)dt.Year == _reservation.StartingDate?.Year && (int)dt.Month == _reservation.StartingDate?.Month && (int)dt.Day <= _reservation.StartingDate?.Day)))" />
                </MudItem>

            </MudGrid>

        </EditForm>

        @* reservation table *@
        <MudTable Items="_reservation.Dogs" Hover >

            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Owner</MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Status</MudTh>
            </HeaderContent>

            <RowTemplate>

                @* data *@
                <MudTd DataLabel="Name">
                    <MudStack Row AlignItems="AlignItems.Center">

                        <MudAvatar>
                            <MudImage ObjectFit="ObjectFit.Cover" Src="@context.AvatarURL" />
                        </MudAvatar>

                        <MudStack Spacing="0">
                            <MudText Typo="Typo.h6">@context.Name</MudText>
                            <MudText Typo="Typo.caption">@context.Breed</MudText>
                        </MudStack>

                    </MudStack>
                </MudTd>

                @* data *@
                <MudTd DataLabel="Owner">
                    <MudStack Spacing="0">

                        <MudStack Spacing="0">
                            <MudText Typo="Typo.body2">@(context?.Client?.FirstName + " " + context?.Client?.LastName)</MudText>
                            <MudText Typo="Typo.body2">@context?.Client?.Email</MudText>
                        </MudStack>

                    </MudStack>
                </MudTd>
                
                @* status *@
                <MudTd DataLabel="Status">

                    @if (context.ReservationPaymentConfirmed)
                    {
                        <MudChip T="string" Variant="Variant.Text" Color="Color.Success">Approved</MudChip>
                    }
                    else if (context.ReservationPaymentURL != string.Empty)
                    {
                        <MudChip T="string" Variant="Variant.Text" Color="Color.Warning">Pending</MudChip>
                    }
                    else if (context.ReservationPaymentURL == string.Empty)
                    {
                        <MudChip T="string" Variant="Variant.Text" Color="Color.Error">Not Paid</MudChip>
                    }

                </MudTd>
                
                @* actions *@
                <MudTd>
                    <MudStack Row Justify="Justify.FlexEnd">

                        @if (context.ReservationPaymentURL != string.Empty)
                        {
                            <MudButton OnClick="@(() => _ShowReceipt(context))" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Receipt">Receipt</MudButton>
                        }

                    </MudStack>
                </MudTd>

            </RowTemplate>

            <PagerContent><MudTablePager /></PagerContent>

        </MudTable>

    </MudStack>
</MudContainer>

@* view receipt messagebox *@
<MudMessageBox @ref="_receiptMessageBox">

    <MessageContent>
            <MudStack AlignItems="AlignItems.Center">
                <MudImage Src="@_dogOpen.ReservationPaymentURL" Fluid />
            </MudStack>
    </MessageContent>

    <YesButton>
        @if (_dogOpen.ReservationPaymentConfirmed)
        {

            <MudButton Disabled EndIcon="@Icons.Material.Filled.Check" Variant="Variant.Outlined">Approved</MudButton>
        }
        else
        {
            <MudButton OnClick="@(() => _Reject(_dogOpen.ID))" Color="Color.Error" Variant="Variant.Filled">Reject</MudButton>
            <MudButton OnClick="@(() => _Approve(_dogOpen.ID))" Color="Color.Primary" Variant="Variant.Filled">Approve</MudButton>
        }
    </YesButton>

</MudMessageBox>

<MudMessageBox @ref="_messageBox">

    <TitleContent>
        <MudText Typo="Typo.h6">Confirm Delete</MudText>
    </TitleContent>

    <MessageContent>
        <MudText Typo="Typo.body1">Are you sure you want to delete? This action is permanent and cannot be undone.</MudText>
    </MessageContent>

    <YesButton>
        <MudButton Color="Color.Error" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete">Delete</MudButton>
    </YesButton>

    <CancelButton>
        <MudButton>Cancel</MudButton>
    </CancelButton>

</MudMessageBox>

@code
{
    [Parameter] public int reservationID { get; set; }

    // on initialize
    private Shared.Reservation _reservation = new();
    private EditContext? _formContext;

    protected override async Task OnInitializedAsync()
    {
        _formContext = new EditContext(_reservation);
        await _RefreshDataAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await _RefreshDataAsync();
        _formContext = new EditContext(_reservation);
    }

    // edit
    private string _editButtonDisplay = string.Empty;
    private string _editModeButtonDisplay = "display: none";
    private bool _isFormReadonly = true;
    private void _EditMode()
    {
        _editButtonDisplay = "display:none";
        _editModeButtonDisplay = string.Empty;
        _isFormReadonly = false;
    }

    // cancel
    private async Task _CancelAsync()
    {
        _editButtonDisplay = string.Empty;
        _editModeButtonDisplay = "display:none";
        _isFormReadonly = true;

        // update
        _reservation = await HttpClient.Reservation.GetAsync(reservationID);
    }

    // delete reservation
    private bool _disabledDelete;
    private MudMessageBox? _messageBox { get; set; }

    private async Task _DeleteDialog()
    {
        bool? result = await _messageBox!.ShowAsync(new DialogOptions() { });
        if (result == true)
        {
            await HttpClient.Reservation.DeleteAsync(reservationID);
            _Back();
        }
    }

    // save
    private async Task _SaveAsync()
    {
        if (!_formContext!.Validate())
            return;

        // edit mode false
        _editButtonDisplay = string.Empty;
        _editModeButtonDisplay = "display:none";
        _isFormReadonly = true;

        await HttpClient.Reservation.UpdateAsync(_reservation);

        // refresh data
        await HttpClient.Reservation.FetchAsync();
        _reservation = await HttpClient.Reservation.GetAsync(reservationID);
        Snackbar.Add("Edited succesfully", MudBlazor.Severity.Success);

        return;
    }

    // open receipt
    private MudMessageBox? _receiptMessageBox { get; set; }
    private Shared.Dog _dogOpen = new();

    private async Task _ShowReceipt(Shared.Dog dog)
    {
        _dogOpen.ReservationPaymentURL = dog.ReservationPaymentURL;
        _dogOpen.ReservationPaymentConfirmed = dog.ReservationPaymentConfirmed;
        _dogOpen.ID = dog.ID;

        bool? result = await _receiptMessageBox!.ShowAsync(new DialogOptions()
        {
            FullScreen = true,
            CloseButton = true
        });
        if (result != null) { }
    }

    private async Task _Approve(int dogID)
    {
        await HttpClient.Customer.ApprovePaymentAsync(dogID);
        await _RefreshDataAsync();
        Snackbar.Add("Approved succesfully", MudBlazor.Severity.Success);
    }

    private async Task _Reject(int dogID)
    {
        var dialog = await DialogService.ShowAsync<ReservationPagesComponents.ReasonForRejectionDialog>(string.Empty,
        new DialogParameters<ReservationPagesComponents.ReasonForRejectionDialog>
        {
            { d => d.dogID, dogID },
        },
        new DialogOptions()
        {
            BackdropClick = false,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseButton = true,
            CloseOnEscapeKey = true
        });

        // on dialog close
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await _RefreshDataAsync();
        }
    }

    // refresh data
    private async Task _RefreshDataAsync()
    {
        _reservation = await HttpClient.Reservation.GetAsync(reservationID);
        StateHasChanged();

        await HttpClient.Reservation.FetchAsync();
        _reservation = await HttpClient.Reservation.GetAsync(reservationID);
    }

    // back
    private void _Back()
    {
        NavigationManager.NavigateTo($"/admin/reservation-list");
    }
}
