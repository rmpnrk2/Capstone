<MudGrid Spacing="2">

    @* Client/Member Ratio *@
    <MudItem xs="6">
        <MudPaper Class="py-4">

            <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center">
                <MudText Typo="Typo.h6">Client Ratio</MudText>
            </MudStack>

            @* Donut chart *@
            <MudStack AlignItems="AlignItems.Center">
                <MudChart ChartType="ChartType.Donut" Width="100px" ChartOptions="_ClientDonutOptions" Height="100px" InputData="@_clientDonutData" InputLabels="@_clientDonutLabels" LegendPosition="Position.Right" />
                <MudStack Spacing="0" AlignItems="AlignItems.Start" Justify="Justify.Center">
                    <MudStack Row AlignItems="AlignItems.Center">
                        <MudIcon Icon="@Icons.Material.Filled.FiberManualRecord" Size="Size.Small" Color="Color.Info"></MudIcon>
                        <MudText Typo="Typo.body2">Customers:</MudText>
                        <MudText Typo="Typo.subtitle1" Color="Color.Info">@Receipts.Where(r => r.receiptType <= 2).Count()</MudText>
                    </MudStack>
                    <MudStack Row AlignItems="AlignItems.Center">
                        <MudIcon Icon="@Icons.Material.Filled.FiberManualRecord" Size="Size.Small" Color="Color.Tertiary"></MudIcon>
                        <MudText Typo="Typo.body2">Members:</MudText>
                        <MudText Typo="Typo.subtitle1" Color="Color.Tertiary">@Receipts.Where(r => 2 <= r.receiptType).Count()</MudText>
                    </MudStack>
                </MudStack>
            </MudStack>

        </MudPaper>
    </MudItem>

    <MudItem xs="6">
        <MudPaper Class="py-4">

            <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center">
                <MudText Typo="Typo.h6">Revenue Ratio</MudText>
            </MudStack>

            @* Finance donut chart *@
            <MudStack AlignItems="AlignItems.Center">
                <MudChart ChartType="ChartType.Donut" Width="100px" ChartOptions="_ClientDonutOptions" Height="100px" InputData="@_financeRatioData" InputLabels="@_clientDonutLabels" LegendPosition="Position.Right" />
                <MudStack Spacing="0">

                    @* Client Ratio *@
                    <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert>
                        <MudStack Spacing="0">
                            <MudText Typo="Typo.body2">
                                <MudIcon Icon="@Icons.Material.Filled.FiberManualRecord" Size="Size.Small" Color="Color.Info" />
                                Invoices:
                            </MudText>
                            <MudText Typo="Typo.subtitle1" Color="Color.Info" Align="Align.Right">
                                @_financeRatioData[0]
                                <MudText Typo="Typo.caption" Color="Color.Info">PHP</MudText>
                            </MudText>
                        </MudStack>
                        <MudStack Spacing="0">
                            <MudText Typo="Typo.body2">
                                <MudIcon Icon="@Icons.Material.Filled.FiberManualRecord" Size="Size.Small" Color="Color.Tertiary" />
                                Memberships:
                            </MudText>
                            <MudText Typo="Typo.subtitle1" Color="Color.Tertiary" Align="Align.Right">
                                @_financeRatioData[1].ToString("F2")
                                <MudText Typo="Typo.caption" Color="Color.Tertiary">PHP</MudText>
                            </MudText>
                        </MudStack>
                        <MudStack Spacing="0">
                            <MudText Typo="Typo.body2">Total Revenue:</MudText>
                            <MudText Typo="Typo.subtitle1" Align="Align.Right">
                                @((_financeRatioData[0] + _financeRatioData[1]).ToString("F2"))
                                <MudText Typo="Typo.caption">PHP</MudText>
                            </MudText>
                        </MudStack>
                    </MudHidden>

                    @* Ravenue Ratio *@
                    <MudHidden Breakpoint="Breakpoint.SmAndUp" Invert>
                        <MudStack Row AlignItems="AlignItems.Center">
                            <MudIcon Icon="@Icons.Material.Filled.FiberManualRecord" Size="Size.Small" Color="Color.Info"></MudIcon>
                            <MudText Typo="Typo.body2">Invoices:</MudText>
                            <MudText Typo="Typo.subtitle1" Color="Color.Info">
                                @_financeRatioData[0]
                                <MudText Typo="Typo.caption" Color="Color.Info">PHP</MudText>
                            </MudText>
                        </MudStack>
                        <MudStack Row AlignItems="AlignItems.Center">
                            <MudIcon Icon="@Icons.Material.Filled.FiberManualRecord" Size="Size.Small" Color="Color.Tertiary"></MudIcon>
                            <MudText Typo="Typo.body2">Memberships:</MudText>
                            <MudText Typo="Typo.subtitle1" Color="Color.Tertiary">
                                @_financeRatioData[1].ToString("F2")
                                <MudText Typo="Typo.caption" Color="Color.Tertiary">PHP</MudText>
                            </MudText>
                        </MudStack>
                    </MudHidden>

                </MudStack>
            </MudStack>

        </MudPaper>
    </MudItem>

</MudGrid>

@code
{
    [Parameter] public List<Shared.Receipt> Receipts { get; set; } = new();

    protected override void OnParametersSet()
    {
        // Update donut chart
        _clientDonutData = _CalculateClientData();
        _financeRatioData = _CalculateFinanceData();
    }

    // Client Donut chart
    private double[] _clientDonutData = { 0, 0 };
    private string[] _clientDonutLabels = { "Customer", "Member"};

    private ChartOptions _ClientDonutOptions = new ChartOptions()
    {
        ShowLegend = false
    };

    private double[] _CalculateClientData()
    {
        List<double> listSeries = new();
        listSeries.Add(Receipts.Where(r => r.receiptType <= 2).Count());
        listSeries.Add(Receipts.Where(r => 3 <= r.receiptType).Count());

        return listSeries.ToArray();
    }

    // Finance Ratio
    private double[] _financeRatioData = { 0, 0 };
    private string[] _financeRatioLabels = { "Customers", "Memberships" };
    private ChartOptions _financeRatioOptions = new ChartOptions()
    {
        ShowLegend = false
    };
    private double[] _CalculateFinanceData()
    {
        List<double> listSeries = new();

        // Total all invoices and reservation fees
        double statementOfAccountGrandTotal = 0.00F;

        statementOfAccountGrandTotal += Receipts.Where(r => r.receiptType == 2).Count() * 300; // Add all reservation fee

        foreach (SouthSideK9Camp.Shared.Receipt receipt in Receipts) // Add all invoices balance
        {
            if (receipt.receiptType == 2)
                statementOfAccountGrandTotal += receipt.Balance;
        }

        listSeries.Add(statementOfAccountGrandTotal);

        // Add all Member Revenue
        double memberRevenue = 0;
        memberRevenue += Receipts.Where(r => r.receiptType == 3).Count() * 1500; // membership registratopm fee is 1500.00
        memberRevenue += Receipts.Where(r => r.receiptType == 4).Count() * 1500; // membership due fee is 1500.00

        listSeries.Add(memberRevenue);

        return listSeries.ToArray();
    }

}
