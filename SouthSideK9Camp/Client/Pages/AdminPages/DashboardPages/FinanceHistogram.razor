@* Finance histogram *@
<MudPaper Class="pt-4">

    <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center">
        <MudText Typo="Typo.h6">Revenue Histogram</MudText>
    </MudStack>

    @* Bar chart *@
    <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center">
        <MudChart ChartOptions="@_financeSeriesOptions" ChartType="ChartType.StackedBar" ChartSeries="@_financeSeries" XAxisLabels="@_financeSeriesLabels" Height="300px" Width="100%" />
    </MudStack>

</MudPaper>

@code
{
    [Parameter] public List<Shared.Receipt> Receipts { get; set; } = new();

    protected override void OnParametersSet()
    {
        // Compute finance histogram
        _financeSeries = new List<ChartSeries>()
        {
            new ChartSeries() { Name = "Customer Revenue", Data = _FinanceSeriesInvoiceData() },
            new ChartSeries() { Name = "Membership Revenue", Data = _FinanceSeriesMembershipData() },
        };
    }

    // Finance Histogram
    private List<ChartSeries> _financeSeries = new List<ChartSeries>();
    private ChartOptions _financeSeriesOptions = new ChartOptions()
    {
        YAxisLines = true,
        YAxisTicks = 5000
    };
    private string[] _financeSeriesLabels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };

    // Calculate Client statistics
    private double[] _FinanceSeriesInvoiceData()
    {
        List<double> seriesData = new();

        // Loop through every month of the year
        for (DateTime date = new(DateTime.Now.Year, 1, 1); date.Year == DateTime.UtcNow.Year; date = date.AddMonths(1))
        {
            // Total all invoices and reservation fees
            double customerRevenue = 0;
            foreach (SouthSideK9Camp.Shared.Receipt receipt in Receipts) // Add statement of accounts
            {
                if (receipt.receiptType == 2 && receipt.DateCreated.Month == date.Month)
                    customerRevenue += receipt.Balance;
            }
            customerRevenue += Receipts.Where(r => r.DateCreated.Month == date.Month).Where(r => r.receiptType == 1).Count() * 300; // Add reservation fees

            seriesData.Add(customerRevenue);
        }
        return seriesData.ToArray();
    }
    private double[] _FinanceSeriesMembershipData()
    {
        List<double> seriesData = new();

        // Loop through every month of the year
        for (DateTime date = new(DateTime.Now.Year, 1, 1); date.Year == DateTime.UtcNow.Year; date = date.AddMonths(1))
        {
            // Add all Member Revenue
            double memberRevenue = 0;
            memberRevenue += Receipts.Where(r => r.DateCreated.Month == date.Month).Where(r => r.receiptType == 3).Count() * 1500; // Membership registration fee is 1500.00
            memberRevenue += Receipts.Where(r => r.DateCreated.Month == date.Month).Where(r => r.receiptType == 4).Count() * 300; // Membership due fee is 1500.00

            seriesData.Add(memberRevenue);
        }

        return seriesData.ToArray();
    }

}
