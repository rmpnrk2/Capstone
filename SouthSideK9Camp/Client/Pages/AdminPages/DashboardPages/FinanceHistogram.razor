@* Finance histogram *@
<MudPaper Class="pt-4">

    <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center">
        <MudText Typo="Typo.h6">Revenue Histogram</MudText>
    </MudStack>

    @* Bar chart *@
    <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center">
        <MudChart ChartOptions="@_financeSeriesOptions" ChartType="ChartType.StackedBar" ChartSeries="@_financeSeries" XAxisLabels="@_financeSeriesLabels" Height="300px" Width="100%" />
    </MudStack>

</MudPaper>

@code
{
    [Parameter] public List<Shared.Client> Client { get; set; } = new();

    private List<Shared.Dog> _boardAndTrain = new();
    private List<Shared.Member> _members = new();
    private List<Shared.Invoice> _invoices = new();
    private List<Shared.MembershipDue> _membershipdues = new();

    protected override void OnParametersSet()
    {
        _boardAndTrain = Client.SelectMany(c => c.Dogs).Where(d => d.ReservationPaymentConfirmed).ToList();
        _members = Client.Where(c => c.Member != null).Select(c => c.Member).Where(m => m.RegistrationConfirmed).ToList();
        _invoices = Client.SelectMany(c => c.Dogs).SelectMany(d => d.Invoices).Where(i => i.PaymentConfirmed).ToList();
        _membershipdues = Client.Where(c => c.Member != null).Select(c => c.Member).SelectMany(m => m.MembershipDues).Where(m => m.PaymentConfirmed).ToList();

        // Compute finance histogram
        _financeSeries = new List<ChartSeries>()
        {
            new ChartSeries() { Name = "Customer Revenue", Data = _FinanceSeriesInvoiceData() },
            new ChartSeries() { Name = "Membership Revenue", Data = _FinanceSeriesMembershipData() },
        };
    }

    // Finance Histogram
    private List<ChartSeries> _financeSeries = new List<ChartSeries>();
    private ChartOptions _financeSeriesOptions = new ChartOptions()
        {
            YAxisLines = true,
            YAxisTicks = 5000
        };
    private string[] _financeSeriesLabels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };

    // Calculate Client statistics
    private double[] _FinanceSeriesInvoiceData()
    {
        List<double> seriesData = new();

        // Loop through every month of the year
        for (DateTime date = new(DateTime.Now.Year, 1, 1); date.Year == DateTime.UtcNow.Year; date = date.AddMonths(1))
        {
            // Total all invoices and reservation fees
            double customerRevenue = 0;
            foreach (SouthSideK9Camp.Shared.Invoice invoice in _invoices) // Add statement of accounts
            {
                if (invoice.DateCreated.Month == date.Month && invoice.PaymentConfirmed)
                    customerRevenue += invoice.Balance;
            }
            customerRevenue += _boardAndTrain.Where(m => m.DateCreated.Month == date.Month).Where(b => b.ReservationPaymentConfirmed).Count() * 300; // Add reservation fees

            seriesData.Add(customerRevenue);
        }
        return seriesData.ToArray();
    }
    private double[] _FinanceSeriesMembershipData()
    {
        List<double> seriesData = new();

        // Loop through every month of the year
        for (DateTime date = new(DateTime.Now.Year, 1, 1); date.Year == DateTime.UtcNow.Year; date = date.AddMonths(1))
        {
            // Add all Member Revenue
            double memberRevenue = 0;
            memberRevenue += _members.Where(m => m.DateCreated.Month == date.Month).Count() * 300; // membership due fee is 300.00
            memberRevenue += _membershipdues.Where(m => m.DateCreated.Month == date.Month).Count() * 300; // membership due fee is 300.00

            seriesData.Add(memberRevenue);
        }

        return seriesData.ToArray();
    }

}
