@* Finance histogram *@
<MudPaper Class="pt-4">

    <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center">
        <MudText Typo="Typo.h6">Revenue Histogram</MudText>
    </MudStack>

    @* Bar chart *@
    <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center">
        <MudChart ChartOptions="@_financeSeriesOptions" ChartType="ChartType.StackedBar" ChartSeries="@_financeSeries" XAxisLabels="@_financeSeriesLabels" Height="300px" Width="100%" />
    </MudStack>

</MudPaper>

@code
{
    [Parameter] public List<Shared.Client> Client { get; set; } = new();

    private List<Shared.Dog> _customers = new();
    private List<Shared.Member> _members = new();
    private List<Shared.Invoice> _invoices = new();
    private List<Shared.MembershipDue> _membershipdues = new();

    protected override void OnParametersSet()
    {
        _customers = Client.SelectMany(c => c.Dogs).Where(d => d.ReservationPaymentConfirmed).ToList();
        _members = Client.Where(c => c.Member != null).Select(c => c.Member).Where(m => m.RegistrationConfirmed).ToList();
        _invoices = Client.SelectMany(c => c.Dogs).SelectMany(d => d.Invoices).Where(i => i.PaymentConfirmed).ToList();
        _membershipdues = Client.Select(c => c.Member).SelectMany(m => m.MembershipDues).Where(m => m.PaymentConfirmed).ToList();

        // Compute finance histogram
        _financeSeries = new List<ChartSeries>()
        {
            new ChartSeries() { Name = "Statement of Account Revenue", Data = _FinanceSeriesInvoiceData() },
            new ChartSeries() { Name = "Membership Revenue", Data = _FinanceSeriesMembershipData() },
        };
    }

    // Finance Histogram
    private List<ChartSeries> _financeSeries = new List<ChartSeries>();
    private ChartOptions _financeSeriesOptions = new ChartOptions()
        {
            YAxisLines = true,
            YAxisTicks = 1000
        };
    private string[] _financeSeriesLabels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };

    // Calculate Client statistics
    private double[] _FinanceSeriesInvoiceData()
    {
        List<double> seriesData = new();

        // Loop through every month of the year
        DateTime date = new(DateTime.Now.Year, 1, 1);
        while (date.Year == DateTime.UtcNow.Year)
        {
            // Filter Invoices that are not tamplates
            List<Shared.Invoice> invoicesOfTheMonth = _invoices.FindAll(c => c.DateCreated.Month == date.Month).ToList();

            // Add all invoice balance of that month
            double invoicesOfTheMonthTotal = 0.00F;
            foreach (SouthSideK9Camp.Shared.Invoice invoice in invoicesOfTheMonth)
            {
                invoicesOfTheMonthTotal += invoice.Balance;
            }
            seriesData.Add(invoicesOfTheMonthTotal);
            date = date.AddMonths(1);
        }
        return seriesData.ToArray();
    }
    private double[] _FinanceSeriesMembershipData()
    {
        List<double> seriesData = new();

        // Loop through every month of the year
        DateTime date = new(DateTime.Now.Year, 1, 1);
        while (date.Year == DateTime.UtcNow.Year)
        {

            // Add all membership of that month
            double membershipOfTheMonthTotal = 0.00F;
            membershipOfTheMonthTotal += _membershipdues.FindAll(c => c.DateCreated.Month == date.Month).Count() * 300; // membership fee is 300.00

            seriesData.Add(membershipOfTheMonthTotal);
            date = date.AddMonths(1);
        }
        return seriesData.ToArray();
    }

}
