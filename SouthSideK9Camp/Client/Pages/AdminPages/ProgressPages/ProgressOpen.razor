@page "/admin/report/{dogID:int}";

@layout AdminLayout

@inject SouthSideK9CampHttpClient HttpClient
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudContainer MaxWidth="MaxWidth.Medium" Class="my-16">

    @* Breadcrumbs *@
    <MudBreadcrumbs Items="_breadcrumbs" />

    <MudText Class="mb-3" Typo="Typo.h3">Progress Reports</MudText>

    <MudGrid Spacing="2">

        @* Statistics *@
        <MudItem xs="12">
            <MudTabs Elevation="1" Rounded ApplyEffectsToContainer>

                <MudTabPanel Text="Training">
                    <SouthSideK9Camp.Client.Pages.AdminPages.ProgressPages.ProgressComponents.TrainingTimeStatisticsComponent dog="_dog" />
                </MudTabPanel>

                <MudTabPanel Text="Score">
                    <SouthSideK9Camp.Client.Pages.AdminPages.ProgressPages.ProgressComponents.ProgressHistogramComponent dog="_dog" />
                </MudTabPanel>

            </MudTabs>
        </MudItem>

        @* main content *@
        <MudItem xs="12" sm="7">
            <MudStack Spacing="2" >

                @* toolbar *@
                <MudPaper>
                    <MudToolBar>
                        <MudStack Row Spacing="1">

                            <MudButton OnClick="_Back" StartIcon="@Icons.Material.Outlined.ArrowBack">Back</MudButton>
                            <MudButton OnClick="@(() => _EditReport(new()))" StartIcon="@Icons.Material.Outlined.Add" Variant="Variant.Filled" Color="Color.Primary">New</MudButton>

                        </MudStack>
                    </MudToolBar>
                </MudPaper>

                @* report card *@
                @foreach (Shared.ProgressReport report in _dog.ProgressReports)
                {
                    <MudCard>

                        @* card header *@
                        <MudCardHeader>

                            <CardHeaderContent>

                                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                    <MudText Typo="Typo.h6">@report.Subject</MudText>
                                    <MudText Typo="Typo.caption">@report.DateCreated.ToString("dd MMM yyyy dddd")</MudText>
                                </MudStack>

                                <MudText Typo="Typo.body1">@report.Message</MudText>

                            </CardHeaderContent>

                            <CardHeaderActions>
                                <MudMenu Icon="@Icons.Material.Filled.MoreVert" AnchorOrigin="Origin.CenterLeft" TransformOrigin="Origin.CenterRight">
                                    <MudMenuItem OnTouch="@(() => _EditReport(report))" OnClick="@(() => _EditReport(report))" Icon="@Icons.Material.Filled.Edit">Edit</MudMenuItem>
                                    <MudMenuItem OnTouch="@(() => Delete(report.ID))" OnClick="@(() => Delete(report.ID))" Icon="@Icons.Material.Filled.DeleteForever">Delete</MudMenuItem>
                                </MudMenu>
                            </CardHeaderActions>

                        </MudCardHeader>

                        @* card image *@
                        @if(report.ImageURL != string.Empty)
                        {
                            <MudCardMedia Image="@report.ImageURL" Height="400" />
                        }
                        
                        @* card content *@
                        <MudCardContent>

                            @* ratings *@
                            <MudGrid>

                                <MudItem xs="12" sm="6">
                                    <MudStack Spacing="0" AlignItems="AlignItems.Center">
                                        <MudText Typo="Typo.body1" Style="font-weight: bold">@report.SpanDuration?.ToString(@"h\:mm") hours</MudText>
                                        <MudText Typo="Typo.caption">Hours Trained:</MudText>
                                    </MudStack>
                                </MudItem>

                                <MudItem xs="12" sm="6">
                                    <MudStack Spacing="0" AlignItems="AlignItems.Center">
                                        <MudText Typo="Typo.body1" Style="font-weight: bold">@report.DateTraining?.ToString("dd MMM")</MudText>
                                        <MudText Typo="Typo.caption">Training Date:</MudText>
                                    </MudStack>
                                </MudItem>

                                <MudItem xs="12" sm="4">
                                    <MudStack Spacing="0" AlignItems="AlignItems.Center">
                                        <MudText Typo="Typo.caption">Obedience Rating:</MudText>
                                        <MudRating @bind-SelectedValue="report.ScoreObedience" ReadOnly MaxValue="5" />
                                        <MudText Color="Color.Primary" Typo="Typo.subtitle2">@_RatingLabel(report.ScoreObedience)</MudText>
                                    </MudStack>
                                </MudItem>

                                <MudItem xs="12" sm="4">
                                    <MudStack Spacing="0" AlignItems="AlignItems.Center">
                                        <MudText Typo="Typo.caption">Focus Rating:</MudText>
                                        <MudRating @bind-SelectedValue="report.ScoreFocus" Class="ma-0" ReadOnly MaxValue="5" />
                                        <MudText Color="Color.Primary" Typo="Typo.subtitle2" Class="ma-0">@_RatingLabel(report.ScoreFocus)</MudText>
                                    </MudStack>
                                </MudItem>

                                <MudItem xs="12" sm="4">
                                    <MudStack Spacing="0" AlignItems="AlignItems.Center">
                                        <MudText Typo="Typo.caption">Protection Rating:</MudText>
                                        <MudRating @bind-SelectedValue="report.ScoreProtection" ReadOnly MaxValue="5" />
                                        <MudText Color="Color.Primary" Typo="Typo.subtitle2">@_RatingLabel(report.ScoreProtection)</MudText>
                                    </MudStack>
                                </MudItem>

                            </MudGrid>

                        </MudCardContent>

                        <MudCardActions>
                        </MudCardActions>

                    </MudCard>
                }

            </MudStack>
        </MudItem>

        @* Side profile *@
        <MudItem xs="12" sm="5">
            <SouthSideK9Camp.Client.Pages.AdminPages.ProgressPages.ProgressComponents.DogProfileComponent dog="_dog" />            
        </MudItem>

    </MudGrid>
</MudContainer>

@* confirm delete messagenox *@
<MudMessageBox @ref="confirmDeleteBox">

    <TitleContent>
        <MudText Typo="Typo.h6">Confirm Delete</MudText>
    </TitleContent>

    <MessageContent>
        <MudText Typo="Typo.body1">Are you sure you want to delete this post? Deleting cannot be undone.</MudText>
    </MessageContent>

    <CancelButton>
        <MudButton StartIcon="@Icons.Material.Filled.Close">Cancel</MudButton>
    </CancelButton>

    <YesButton>
        <MudButton Color="MudBlazor.Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever" Variant="Variant.Filled">Confirm</MudButton>
    </YesButton>

</MudMessageBox>

@code
{
    [Parameter] public int dogID { get; set; }

    private Shared.Dog _dog = new();

    // Breadcrumbs
    private List<BreadcrumbItem> _breadcrumbs = new()
    {
        new BreadcrumbItem("Progress Reports", "/admin/report-list", false, Icons.Material.Filled.Flag),
        new BreadcrumbItem(string.Empty, null, true, Icons.Material.Filled.Tag)
    };

    // On Initialized set
    protected override async Task OnInitializedAsync()
    {
        await _RefreshData();
    }

    // edit new report
    private async Task _EditReport(Shared.ProgressReport report)
    {
        // Open dialog
        var dialog = await DialogService.ShowAsync<ProgressComponents.EditProgressDialog>(null,
        new DialogParameters<ProgressComponents.EditProgressDialog>
        {
            { p => p.dogID, dogID},
            { p => p.report, report},
            { p => p.reservation, _dog.Reservation}
        },
        new DialogOptions()
        {
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            BackdropClick = false
        });

        // On dialog close
        var dialogResult = await dialog.Result;
        if (!dialogResult!.Canceled)
        {
            await _RefreshData();
        }
    }

    // Confirm delete message box
    MudMessageBox? confirmDeleteBox { get; set; }
    private async Task Delete(int progressReportID)
    {
        // Show Messagebox
        bool? result = await confirmDeleteBox!.ShowAsync();

        // Confirmed delete
        if (result is not null)
        {
            await HttpClient.Report.DeleteAsync(progressReportID);
            Snackbar.Add($"Deleted Report", Severity.Error);
            await _RefreshData();
        }
    }

    // back
    private void _Back()
    {
        NavigationManager.NavigateTo("/admin/report-list");
    }

    // refresh data
    private async Task _RefreshData()
    {
        _dog = await HttpClient.Dog.GetByIDAsync(dogID);
        _dog.ProgressReports.Reverse();
        _breadcrumbs[1] = new BreadcrumbItem(_dog.Name, null, true, Icons.Material.Filled.Tag);
        StateHasChanged();

        await HttpClient.Dog.FetchAsync();
        _dog = await HttpClient.Dog.GetByIDAsync(dogID);
        _dog.ProgressReports.Reverse();
        _breadcrumbs[1] = new BreadcrumbItem(_dog.Name, null, true, Icons.Material.Filled.Tag);
        StateHasChanged();
    }

    // rating label
    public string _RatingLabel(int rating) => rating switch
    {
        1 => "Needs Improvement",
        2 => "Developing Skills",
        3 => "Progressing Steadily",
        4 => "Consistent Performer",
        5 => "Excellent Results!",
        _ => "No Rating"
    };
}